name: cl-pipeline
on: push
jobs:
  sonarcloud:
    # runs-on: ubuntu-20.04
    # steps:
    #   - uses: actions/checkout@v2
    #     with:
    #       fetch-depth: 0
    #   - name: SonarCloud Scan
    #     uses: sonarsource/sonarcloud-github-action@master
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    name: sonarcloud
    runs-on: windows-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"ndiemer_project-pizza-box-web" /o:"ndiemer" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - run: dotnet build

  test:
    runs-on: ubuntu-20.04
    name: Generate Test Reports
    env:
      RESULTS_PATH: test-reports/index.html
    steps:
      - name: XUnit Viewer
        id: xunit-viewer
        uses: AutoModality/action-xunit-viewer@v1
        with:
          results: ${{ env.RESULTS_PATH }}
      - name: The generated report
        run: echo "The report is ${{ steps.xunit-viewer.outputs.report-file }}"
      - name: Attach the report
        uses: actions/upload-artifact@v1
        with:
          name: alternate-results-path-reports
          path: ${{ env.RESULTS_PATH }}